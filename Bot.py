from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

API_TOKEN = "7847861512:AAEShfuvEJrf-eXLk7-17PT9N-LVbdooA_8"
CHANNELS = ["@test13121488"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: Message):
    greeting_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, "
        "–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏. –í—ã–±–∏—Ä–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
    ])
    await message.answer(greeting_text, reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data == "free")
async def free_option(callback: CallbackQuery):
    channels_text = "\n".join([f"üëâ {channel}" for channel in CHANNELS])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞–Ω", callback_data="check_subs")]
    ])
    await callback.message.answer(f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{channels_text}", reply_markup=keyboard)

@dp.callback_query(lambda callback: callback.data == "check_subs")
async def check_subscriptions(callback: CallbackQuery):
    user_id = callback.from_user.id
    not_subscribed = []

    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subscribed.append(channel)
        except Exception:
            not_subscribed.append(channel)

    if not not_subscribed:
        await callback.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã - –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –Ω–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.")
    else:
        channels_text = "\n".join([f"üëâ {channel}" for channel in not_subscribed])
        await callback.message.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n{channels_text}")

@dp.callback_query(lambda callback: callback.data == "pay")
async def pay_option(callback: CallbackQuery):
    await callback.message.answer("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–∫–æ—Ä–æ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())